link: https://www.hackerrank.com/challenges/2d-array/problem


-9 -9 -9  1 1 1 
 0 -9  0  4 3 2
-9 -9 -9  1 2 3
 0  0  8  6 6 0
 0  0  0 -2 0 0
 0  0  1  2 4 0
 
-63, -34, -9, 12, 
-10,   0, 28, 23, 
-27, -11, -2, 10, 
  9,  17, 25, 18
 
number of hour glass sums = 2d_array.length-2 * 2d_array_length-2

first hourglass, index [0,0], [0,1], [0,2], [1,1] [2,0], [2,1], [2,2]
second hourglass: index [0,1], [0,2],[0,3],[1,2],[2,1],[2,2],[2,3]
third hourglass: [0,2],[0,3],[0,4],[1,3],[2,2],[2,3],[2,4]
fourth hourglass: [0,3],[0,4],[0,5],[1,4],[2,3],[2,4],[2,5]
fifth hourglass: [1,0],[1,1],[1,2],[2,2],[3,0],[3,1],[3,2]

naive algorithm

// base case
if no array 
	return 0
else
	// use two variables to keep track of the edges of the hurglass
	left_edge_of_hourglass = 0
	right_edge_of_hourglass = 0
	
	for int i = 0; i < 2d_array.length-2; i++
		for int j = 0; j < (2d_array[i].length-2; j++
			sums.append(array[i][j] + array[i][j+1] + array[i][j+2] + array[i+1][j+1] + array[i+2][j] + array[i+2][j+1] + array[i+2][j+2])
	// when we are done with hourglasses in first row
	// go to next row and reset the positions of the edges

1st row, zeros are not included
-9*7 = 63
(-9 * 4) +2 = -34
-9-9+1+4+1+2 = -9
1+1+1+3+2+3+1=12

2nd row
-9-9+8=-10
-9-9+8+6+4 = 0
4+3+1+8+6+6=28
4+3+2+2+6+6 = 23

3rd row
-9-9-9 = -27
-9-9+1+8-2=-11
-9+1+2+6-2=-2
1+2+3+6-2 = 10

4th row
8+1=9
8+6+1+2=17
8+6+6+1+2+4-2 = 25
6+6+2+4 = 18


