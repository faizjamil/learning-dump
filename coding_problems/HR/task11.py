def getMaxDeletions(s):
    # Write your code here
    # possible commands: U, D, L, R
    # get all commands that cancel each other out
    # for example the commands L followed by R anywhere in the sequence can be removed
    # can maybe keep track of how many of each command there are
    # if you add two inverse commands and the result is odd, delete the sum of those commands minus 1, that gives you the maximum possible deletions
    # or if
    char_counts = {
        "U": 0,
        "D": 0,
        "L": 0,
        "R": 0,
    }
    max_deletions = 0
    for i in range(0, len(s)):
        # add each character to a hash map
        if s[i] in char_counts:
            char_counts[s[i]] += 1
    up_commands = char_counts["U"]
    down_commands = char_counts["D"]
    right_commands = char_counts["R"]
    left_commands = char_counts["L"]
    sum_of_vertical_commands = up_commands + down_commands
    sum_of_horizontal_commands = right_commands + left_commands
    if sum_of_vertical_commands > 0:
        if up_commands != 0 and down_commands != 0:
            # no deletions at all
            if up_commands > down_commands:
                max_deletions += down_commands*2
            elif down_commands > up_commands:
                max_deletions += up_commands * 2
            elif down_commands == up_commands: 
                max_deletions += up_commands*2
    if (sum_of_horizontal_commands > 0):
        if (right_commands != 0 and left_commands != 0):
           
            if right_commands > left_commands:
                max_deletions += left_commands*2
            elif left_commands > right_commands:
                max_deletions += right_commands * 2
            elif left_commands == right_commands:
                max_deletions += right_commands*2
    return max_deletions

# print(getMaxDeletions("URDR"))
# print(getMaxDeletions("RRR"))
print(getMaxDeletions("RUDRL"))
# print(getMaxDeletions("ULUDUULLUD"))
# print(getMaxDeletions("UUUUUUUUULUUUUUUUUUUUURRUUUUUUURUUUUUURUUURUUUURURUUURUUUUUUUUUUUUUUUUUUUUURUUUUUUULUUUUUUURUUUUUUUUUUUUUUUUUUUUUUUUURURUUUUUUURUUUUUUUUUUUUURURUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURUUUUUUUUURLUUUUUUUUUUUULUUUUUUUUUUUUUUUUUUURRURUUUULUUUUUUUUUUUUUUUUUUUUUURUUULUUUUUURUUUUUUUDURUUUUUUUUURUURUUUUUUUUUUUUUUUUUUURUUUUULURUUUUUUUUUUUUUUURUUUUURUUURUUUUUUUUUURUUUUUURUUUUUUUUUUUURUUUUUUUUUUURUUUUUUUUUUUUUURUUUUUUUUUUUUURUUUUUUUUUUUURURUUUUURUUULUUUUUUUUUUUUUULUULULUULRUUUUUUUUUUUUUUUUUUUUUUUULRUUURUUUUUURRUUUUUUURUUUUUUUUUUUUUUUUUUUUUUUUUUUURUUUULUURRUUUUUUUUUUUUUUUUUUUUUUUUUUUURUUUUUURURUUUURURUUURUUUUUUURUUUUUUUUUUUUULUUUUUUULURUUUUULUUUURLUUURUUUUUUUUUUUULUUUUUURUUUUUURRULRUUUUUUUUUUUURURUUURUUUUUUUUUUURUUUUUUUUUURUUUUUUUUURUUUUURUUUUUULUUUUURUUUUUURURUUUUUURULULURUURUUULUURUUUUUUUUUUUURUUUUUUUUURUUUUUUUUUURUUUUUUUUUUUUUUUUURUUUUUULULUUUUUUUULUUUUUUUUUUUUUUUUUURUUUUUUUUUUUUUUUUURUUUUULURUUURURUUUUUUUUURRUUUUUUURUUUUUURUUUURUUUUURURUUUUUUUUUULURLUUUURURUUUUUUURUUUUUUUUUUUUUUUUURUURUUUUUUUUUU"))
# print(getMaxDeletions("UUUUULUUUUUULRURUULLUUUUUUUUURRUURUUURRUUUUUURLUULUUUULURRULRUUUURUUUUURURRUUULUURUUULUUUUULUUUURULUUUUULRLLRUULLULRLUURURDURRRUUUURLRURDUULRLUUURUUUUURRUULURURLUUULUUURUURULURUUULUUUURURUUUUULRRRRUUUUULULRLRURLUUULRRLULUUULRURRUURULURLUUUULUUUULLUUURUURRURRUUURUUUULURUUUUUULULUUUUURUUUURUUULUUUURRLLUUUUUUULLRUURUUUUURULRRRUUUUUUURURLLUUUUUURUURUURUULURRULUULLURUUUUUUURLRRLLULUUULRLULUUUULUUUUURRLUULUUUUUURURUUUUUULULUUUULUULURURULRULURUUUUULRRUULRRRURRUUUUURUULUURURRRURUUUUUUURUUULUUUULDLLUULUULUUUUUUUUURULLUUUUURUULUUULURUUUURLULUUUUUUURRUURUUUUUUUUDURRUURLLUUULULUUUUURLUURLLULLRUUULURUURULURUURUURURUULUUUUUUULUURUDLUUUUURUUUUUUURRUUUUUUUUUUUUUURUULURRRRUUULRULLUUUURURURUUUULUURUURRUULRUUUUUUURRUUURRRURRUUUURULUULLRURRRULULUUUUULUUUUUULLUULLURULRUUULDLUURUURURUULLURRURULRUUURURUUUULUUUUURUUULURLUDUUUURURUUULUUULUUUULRUUUUUUULUUUUULRRUUURUDUULULRLUUUUUULRRUUURUUULUURLULUURUUURUULRUURURLUUUUURUURURURUURUURUUUULRULLLUUUUUUUDUUULURRLURULRLRRUUUURULLURLUUUUUULRRURRLUUUUUURLURUUULRUUUUUURL"))
